{"ast":null,"code":"import { authHeader } from '../_helpers';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(`/users/authenticate`, requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  });\n}\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`/users`, requestOptions).then(handleResponse);\n}\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/register`, requestOptions).then(handleResponse);\n}\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: {\n      ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        location.reload(true);\n      }\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n    return data;\n  });\n}","map":{"version":3,"names":["authHeader","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","localStorage","setItem","removeItem","id","response","text","data","parse","ok","status","location","reload","error","message","statusText","Promise","reject"],"sources":["/home/rahulbaghel/Downloads/Demo-Project/client/src/_services/user.service.js"],"sourcesContent":["import { authHeader } from '../_helpers';\n\nexport const userService = {\n    login,\n    logout,\n    register,\n    getAll,\n    getById,\n    update,\n    delete: _delete\n};\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n\n    return fetch(`/users/authenticate`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('user', JSON.stringify(user));\n\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\nfunction getAll() {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader()\n    };\n\n    return fetch(`/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader()\n    };\n\n    return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(user)\n    };\n\n    return fetch(`/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n    const requestOptions = {\n        method: 'PUT',\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\n        body: JSON.stringify(user)\n    };\n\n    return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);;\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n    const requestOptions = {\n        method: 'DELETE',\n        headers: authHeader()\n    };\n\n    return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n                location.reload(true);\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}